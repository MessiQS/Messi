{"version":3,"sources":["../../../src/basic/ListItem.js"],"names":["ListItem","variables","context","theme","OS","androidRipple","props","onPress","onLongPress","Version","_root","c","listBtnUnderlayColor","children","androidRippleColor","Ripple","androidRippleColorDark","marginLeft","paddingLeft","contextTypes","PropTypes","object","propTypes","style","itemDivider","bool","button","StyledListItem"],"mappings":"21BAAA,4B;AACA;;;;;;;AAOA;AACA,mE;AACA,qD;;AAEMA,Q;;;;AAIK;AACP,GAAMC,WAAY,KAAKC,OAAL,CAAaC,KAAb;AACd,KAAKD,OAAL,CAAaC,KAAb,CAAmB,4BAAnB,EAAiDF,SADnC,mBAAlB;;;AAIA;AACE,sBAASG,EAAT,GAAgB,KAAhB;AACA,mBAASC,aAAT,GAA2B,KAD3B;AAEC,CAAC,KAAKC,KAAL,CAAWC,OAAZ,EAAuB,CAAC,KAAKD,KAAL,CAAWE,WAFpC;AAGA,sBAASC,OAAT,EAAoB,EAJtB;AAKE;AACA;AACE;AACE,QAAS,KAAKH,KAAL,CAAWC,OADtB;AAEE,YAAa,KAAKD,KAAL,CAAWE,WAF1B;AAGE,IAAK,sBAAM,QAAKE,KAAL,CAAaC,CAAnB,EAHP;AAIE,cAAeV,UAAUW,oBAJ3B;;AAME,4DAAU,KAAKN,KAAf,mDAAuB,KAAKA,KAAL,CAAWO,QAAlC,CANF,CADF;;;AAUD,CAhBD,IAgBO;AACL;AACE;AACE,IAAK,sBAAM,QAAKH,KAAL,CAAaC,CAAnB,EADP;AAEE,QAAS,KAAKL,KAAL,CAAWC,OAFtB;AAGE,YAAa,KAAKD,KAAL,CAAWE,WAH1B;AAIE;AACE,KAAKF,KAAL,CAAWQ,kBAAX;AACI,qCAAwBC,MAAxB,CAA+B,KAAKT,KAAL,CAAWQ,kBAA1C,CADJ;AAEI,qCAAwBC,MAAxB,CAA+B,mBAASC,sBAAxC,CAPR;;;AAUE,iDAAM,MAAO,CAAEC,WAAY,CAAC,EAAf,CAAmBC,YAAa,EAAhC,CAAb;AACE,4DAAU,KAAKZ,KAAf,mDAAuB,KAAKA,KAAL,CAAWO,QAAlC,CADF,CAVF,CADF;;;;AAgBD;AACF,C,wCA3CGb,Q,CACGmB,Y,CAAe,CACpBhB,MAAO,gBAAMiB,SAAN,CAAgBC,MADH,C;;;AA6CxBrB,SAASsB,SAAT;AACK,gCAAmBA,SADxB;AAEEC,MAAO,gBAAMH,SAAN,CAAgBC,MAFzB;AAGEG,YAAa,gBAAMJ,SAAN,CAAgBK,IAH/B;AAIEC,OAAQ,gBAAMN,SAAN,CAAgBK,IAJ1B;;;AAOA,GAAME,gBAAiB;AACrB,qBADqB;AAErB,EAFqB;;AAIrB3B,QAJqB,CAAvB,C;;AAM2BA,Q,CAAlB2B,c","file":"ListItem.js","sourcesContent":["import React, { Component } from \"react\";\nimport {\n  TouchableHighlight,\n  Platform,\n  TouchableNativeFeedback,\n  View\n} from \"react-native\";\n\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\nimport variable from \"../theme/variables/platform\";\n\nclass ListItem extends Component {\n  static contextTypes = {\n    theme: React.PropTypes.object\n  };\n  render() {\n    const variables = this.context.theme\n      ? this.context.theme[\"@@shoutem.theme/themeStyle\"].variables\n      : variable;\n\n    if (\n      Platform.OS === \"ios\" ||\n      variable.androidRipple === false ||\n      (!this.props.onPress && !this.props.onLongPress) ||\n      Platform.Version <= 21\n    ) {\n      return (\n        <TouchableHighlight\n          onPress={this.props.onPress}\n          onLongPress={this.props.onLongPress}\n          ref={c => (this._root = c)}\n          underlayColor={variables.listBtnUnderlayColor}\n        >\n          <View {...this.props}>{this.props.children}</View>\n        </TouchableHighlight>\n      );\n    } else {\n      return (\n        <TouchableNativeFeedback\n          ref={c => (this._root = c)}\n          onPress={this.props.onPress}\n          onLongPress={this.props.onLongPress}\n          background={\n            this.props.androidRippleColor\n              ? TouchableNativeFeedback.Ripple(this.props.androidRippleColor)\n              : TouchableNativeFeedback.Ripple(variable.androidRippleColorDark)\n          }\n        >\n          <View style={{ marginLeft: -17, paddingLeft: 17 }}>\n            <View {...this.props}>{this.props.children}</View>\n          </View>\n        </TouchableNativeFeedback>\n      );\n    }\n  }\n}\n\nListItem.propTypes = {\n  ...TouchableHighlight.propTypes,\n  style: React.PropTypes.object,\n  itemDivider: React.PropTypes.bool,\n  button: React.PropTypes.bool\n};\n\nconst StyledListItem = connectStyle(\n  \"NativeBase.ListItem\",\n  {},\n  mapPropsToStyleNames\n)(ListItem);\n\nexport { StyledListItem as ListItem };\n"]}