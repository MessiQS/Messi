{"version":3,"sources":["../../../src/basic/Text.js"],"names":["Text","props","uppercase","children","text","isArray","some","isObject","join","toUpper","_root","c","propTypes","bool","style","oneOfType","object","number","array","defaultProps","StyledText"],"mappings":"m1BAAA,4B;AACA,qC;AACA;AACA,8B;;AAEA;AACA,mE;;AAEMA,I;AACI;;;;AAIF,KAAKC,KAJH,CAEJC,SAFI,QAEJA,SAFI,CAGJC,QAHI,QAGJA,QAHI;;AAMN,GAAIC,YAAJ;AACA,GAAI,iBAAEC,OAAF,CAAUF,QAAV,GAAuB,CAAC,iBAAEG,IAAF,CAAOH,QAAP,CAAiB,iBAAEI,QAAnB,CAA5B,CAA0D;;;AAGxDH,KAAO,iBAAEI,IAAF,CAAOL,QAAP,CAAiB,EAAjB,CAAP;AACD,CAJD,IAIO;AACLC,KAAOD,QAAP;AACD;;AAED,GAAID,SAAJ,CAAe;AACbE,KAAO,iBAAEK,OAAF,CAAUL,IAAV,CAAP;AACD;;AAEH;AACC,0DAAQ,IAAK,sBAAM,QAAKM,KAAL,CAAaC,CAAnB,EAAb,EAAwC,KAAKV,KAA7C;AACEG,IADF,CADD;;;AAKA,C;;;AAGFJ,KAAKY,SAAL;AACI,kBAAOA,SADX;AAECV,UAAW,oBAAUW,IAFtB;AAGCC,MAAO,oBAAUC,SAAV,CAAoB,CAAC,oBAAUC,MAAX,CAAmB,oBAAUC,MAA7B,CAAqC,oBAAUC,KAA/C,CAApB,CAHR;;;AAMAlB,KAAKmB,YAAL,CAAoB;AACnBjB,UAAW,KADQ,CAApB;;;AAIA,GAAMkB,YAAa,yCAAa,iBAAb,CAAgC,EAAhC,iCAA0DpB,IAA1D,CAAnB,C;;AAEuBA,I,CAAdoB,U","file":"Text.js","sourcesContent":["import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Text as RNText } from \"react-native\";\nimport _ from \"lodash\";\n\nimport { connectStyle } from \"native-base-shoutem-theme\";\nimport mapPropsToStyleNames from \"../Utils/mapPropsToStyleNames\";\n\nclass Text extends Component {\n\trender() {\n    const {\n      uppercase,\n      children,\n    } = this.props;\n\n    let text;\n    if (_.isArray(children) && !_.some(children, _.isObject)) {\n      // children ['a', 'b'] => iOS: ab, Android: a,b\n      // prevent comma in android\n      text = _.join(children, '');\n    } else {\n      text = children;\n    }\n\n    if (uppercase) {\n      text = _.toUpper(text);\n    }\n\n\t\treturn (\n\t\t\t<RNText ref={c => (this._root = c)} {...this.props}>\n\t\t\t\t{text}\n\t\t\t</RNText>\n\t\t);\n\t}\n}\n\nText.propTypes = {\n\t...RNText.propTypes,\n\tuppercase: PropTypes.bool,\n\tstyle: PropTypes.oneOfType([PropTypes.object, PropTypes.number, PropTypes.array]),\n};\n\nText.defaultProps = {\n\tuppercase: false,\n};\n\nconst StyledText = connectStyle(\"NativeBase.Text\", {}, mapPropsToStyleNames)(Text);\n\nexport { StyledText as Text };\n"]}